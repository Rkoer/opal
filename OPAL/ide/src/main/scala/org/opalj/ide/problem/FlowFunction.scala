/* BSD 2-Clause License - see OPAL/LICENSE for details. */
package org.opalj.ide.problem

import scala.collection.immutable

/**
 * Interface representing IDE flow functions
 */
trait FlowFunction[Fact <: IDEFact] {
    /**
     * Compute the facts that are generated by this flow function when seeing a fact
     * @param sourceFact the incoming fact
     */
    def compute(sourceFact: Fact): collection.Set[Fact]
}

/**
 * Special flow function that always returns the input fact
 */
case class IdentityFlowFunction[Fact <: IDEFact]() extends FlowFunction[Fact] {
    override def compute(sourceFact: Fact): collection.Set[Fact] =
        immutable.Set(sourceFact)
}

/**
 * Special flow function that always returns an empty set
 */
case class EmptyFlowFunction[Fact <: IDEFact]() extends FlowFunction[Fact] {
    override def compute(sourceFact: Fact): collection.Set[Fact] =
        immutable.Set.empty
}
